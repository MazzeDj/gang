//
//  LegalPersonPicker.swift
//  Financer
//
//  Created by Julian Schumacher on 24.12.22.
//

import SwiftUI
import CoreData

/// The View to pick a legal Person
/// for a single Finance
internal struct LegalPersonPicker: View {
    
    /// The View Context to manage Core Data
    @Environment(\.managedObjectContext) private var viewContext
    
    /// The Action to dismiss this View
    @Environment(\.dismiss) private var dismiss : DismissAction
    
    /// The Wrapper for the Legal Person being passed down again
    @EnvironmentObject private var legalPersonWrapper : LegalPersonWrapper
    
    // Preview Code Start
    // (Comment to build)
    //
    // This Code is used in development because it works with the preview.
    // Solution from: https://developer.apple.com/forums/thread/654126
    
    /// The Finances fetched from
    /// the Core Database
    @FetchRequest(fetchRequest: legalPersonFetchRequest)
    private var legalPersons : FetchedResults<LegalPerson>
    //    private let legalPersons : [LegalPerson] = []
    
    /// This is the fetch Request to fetch all the Finances
    /// from the Core Data Persistence Storage
    static private var legalPersonFetchRequest : NSFetchRequest<LegalPerson> {
        let request = LegalPerson.fetchRequest()
        request.sortDescriptors = [
            NSSortDescriptor(
                keyPath: \LegalPerson.name,
                ascending: false
            )
        ]
        return request
    }
    // Preview Code End
    
    
    // Production Code Start
    // (Uncomment to build)
    //
    // This Code is used in production, becasue this Code
    // is generated by Apple and it is shorter.
    // This just doesn't work with the Preview
    
    /// The Finances fetched form the
    /// Code Database.
    //    @FetchRequest(
    //        sortDescriptors: [
    //            SortDescriptor(\LegalPerson.name, order: .reverse)
    //        ]
    //    ) private var legalPersons : FetchedResults<LegalPerson>
    // Production Code End
    
    /// The Type this View currently represents
    @State private var legalPersonType : LegalPerson.LegalPersonType = .none
    
    /// The Legal Person beeing chosen
    @Binding internal var legalPerson : LegalPerson?
    
    /// The Legal Person that should be deleted after the User confirmed it.
    @State private var legalPersonToDeleteAfterConfirmation : LegalPerson? = nil
    
    /// Whether to show the Confirmation Alert to delete a legal Person or not.
    @State private var deleteLegalPersonPresented : Bool = false
    
    /// Whether the Error Alert Dialog when saving data is presented or not.
    @State private var errSavingPresented : Bool = false
    
    var body: some View {
        VStack {
            Picker("Type", selection: $legalPersonType) {
                ForEach(LegalPerson.LegalPersonType.allCases) {
                    person in
                    Text(person.rawValue.capitalized)
                }
            }
            .padding(.horizontal, 10)
            .pickerStyle(.segmented)
            list()
                .alert(
                    "Error",
                    isPresented: $errSavingPresented
                ) {
                    
                } message: {
                    Text(
                        "Error processing Data\nPlease restard the App\n\nIf this Error occurs again, please contact the support."
                    )
                }
                .alert("Are you sure?", isPresented: $deleteLegalPersonPresented) {
                    Button("Delete", role: .destructive) {
                        deleteLegalPerson(legalPersonToDeleteAfterConfirmation!)
                    }
                    // Cancel from here: https://developer.apple.com/documentation/swiftui/view/alert(_:ispresented:actions:message:)-8dvt8
                    Button("Cancel", role: .cancel) {
                        legalPersonToDeleteAfterConfirmation = nil
                    }
                } message: {
                    Text("Deleting this Legal Person will also delete all the connected Finances")
                }
            NavigationLink {
                AddLegalPerson(legalPersonType: legalPersonType)
            } label: {
                Label("Add \(legalPersonType == .none ? "Legal Person" : legalPersonType.rawValue.capitalized)", systemImage: "plus")
            }
        }
        .navigationTitle("Picker")
    }
    
    /// Builds and returns the List of Legal Person
    /// matching the current Selection of
    /// the Legal Person Type Picker
    @ViewBuilder
    private func list() -> some View {
        let persons : [LegalPerson] = personsForType(legalPersonType)
        if !persons.isEmpty {
            if legalPersonType == .none {
                List {
                    Section("Person") {
                        forEachSection(.person)
                    }
                    Section("Company") {
                        forEachSection(.company)
                    }
                    Section("Organization") {
                        forEachSection(.organization)
                    }
                }
            } else {
                List {
                    forEachSection(legalPersonType)
                }
            }
        } else {
            VStack {
                Spacer()
                Label("No \(legalPersonType != .none ? legalPersonType.rawValue.capitalized : "Data") found", systemImage: "xmark.circle")
                NavigationLink("Add \(legalPersonType != .none ? "a \(legalPersonType.rawValue.capitalized)" : "some")", destination: { AddLegalPerson(legalPersonType: legalPersonType) })
                Spacer()
            }
        }
    }
    
    /// Builds, renders and returns the for each section
    /// depending on the passed Legal Person Type
    @ViewBuilder
    private func forEachSection(
        _ lPT : LegalPerson.LegalPersonType
    ) -> some View {
        ForEach(personsForType(lPT)) {
            person in
            LegalPersonListTile(person: person) {
                p in
                legalPersonChosen(p)
            }
            .environmentObject(legalPersonWrapper)
            .swipeActions {
                DeleteButton {
                    deleteLegalPerson(person)
                }
            }
        }
    }
    
    /// Returns all the Legal Persons for the specified Type
    /// in an Array of Legal Persons
    private func personsForType(
        _ legalPersonType : LegalPerson.LegalPersonType
    ) -> [LegalPerson] {
        switch legalPersonType {
            case .person:
                return legalPersons.filter { $0 is Person }
            case .company:
                return legalPersons.filter { $0 is Company }
            case .organization:
                return legalPersons.filter { $0 is Organization }
            case .none:
                return Array(legalPersons)
        }
    }
    
    /// Call this function when a legal Person is  chosen
    /// by tappin on the List Tile
    private func legalPersonChosen(_ person : LegalPerson) -> Void {
        legalPerson = person
        dismiss()
    }
    
    /// Deletes a Legal Person and all connected Finances
    private func deleteLegalPerson(_ person : LegalPerson) -> Void {
        guard legalPersonToDeleteAfterConfirmation != nil else {
            legalPersonToDeleteAfterConfirmation = person
            deleteLegalPersonPresented.toggle()
            return
        }
        do {
            try PersistenceController.shared.deleteLegalPerson(person)
        } catch _ {
            errSavingPresented.toggle()
        }
    }
}

internal struct LegalPersonPicker_Previews: PreviewProvider {
    /// The Preview Legal Person
    @State private static var lP : LegalPerson? = LegalPerson.anonymous
    
    static var previews: some View {
        LegalPersonPicker(legalPerson: $lP)
    }
}
